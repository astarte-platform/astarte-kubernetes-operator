//go:build !ignore_autogenerated

/*
This file is part of Astarte.

Copyright 2020-25 SECO Mind Srl.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by controller-gen. DO NOT EDIT.

package v2alpha1

import (
	"k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BlockWorker) DeepCopyInto(out *BlockWorker) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.DataProvider.DeepCopyInto(&out.DataProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BlockWorker.
func (in *BlockWorker) DeepCopy() *BlockWorker {
	if in == nil {
		return nil
	}
	out := new(BlockWorker)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ContainerBlockSpec) DeepCopyInto(out *ContainerBlockSpec) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	if in.ImagePullSecrets != nil {
		in, out := &in.ImagePullSecrets, &out.ImagePullSecrets
		*out = make([]v1.LocalObjectReference, len(*in))
		copy(*out, *in)
	}
	if in.Environment != nil {
		in, out := &in.Environment, &out.Environment
		*out = make([]v1.EnvVar, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	in.Resources.DeepCopyInto(&out.Resources)
	if in.Workers != nil {
		in, out := &in.Workers, &out.Workers
		*out = make([]BlockWorker, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ContainerBlockSpec.
func (in *ContainerBlockSpec) DeepCopy() *ContainerBlockSpec {
	if in == nil {
		return nil
	}
	out := new(ContainerBlockSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DataProvider) DeepCopyInto(out *DataProvider) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	if in.RabbitMQ != nil {
		in, out := &in.RabbitMQ, &out.RabbitMQ
		*out = new(RabbitMQDataProvider)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DataProvider.
func (in *DataProvider) DeepCopy() *DataProvider {
	if in == nil {
		return nil
	}
	out := new(DataProvider)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Flow) DeepCopyInto(out *Flow) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Flow.
func (in *Flow) DeepCopy() *Flow {
	if in == nil {
		return nil
	}
	out := new(Flow)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Flow) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FlowList) DeepCopyInto(out *FlowList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Flow, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FlowList.
func (in *FlowList) DeepCopy() *FlowList {
	if in == nil {
		return nil
	}
	out := new(FlowList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *FlowList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FlowSpec) DeepCopyInto(out *FlowSpec) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	out.Astarte = in.Astarte
	if in.NativeBlocksResources != nil {
		in, out := &in.NativeBlocksResources, &out.NativeBlocksResources
		*out = make(v1.ResourceList, len(*in))
		for key, val := range *in {
			(*out)[key] = val.DeepCopy()
		}
	}
	out.FlowPool = in.FlowPool
	if in.ContainerBlocks != nil {
		in, out := &in.ContainerBlocks, &out.ContainerBlocks
		*out = make([]ContainerBlockSpec, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FlowSpec.
func (in *FlowSpec) DeepCopy() *FlowSpec {
	if in == nil {
		return nil
	}
	out := new(FlowSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FlowStatus) DeepCopyInto(out *FlowStatus) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	if in.Resources != nil {
		in, out := &in.Resources, &out.Resources
		*out = make(v1.ResourceList, len(*in))
		for key, val := range *in {
			(*out)[key] = val.DeepCopy()
		}
	}
	if in.UnrecoverableFailures != nil {
		in, out := &in.UnrecoverableFailures, &out.UnrecoverableFailures
		*out = make([]v1.ContainerState, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FlowStatus.
func (in *FlowStatus) DeepCopy() *FlowStatus {
	if in == nil {
		return nil
	}
	out := new(FlowStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RabbitMQConfig) DeepCopyInto(out *RabbitMQConfig) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	if in.SSL != nil {
		in, out := &in.SSL, &out.SSL
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RabbitMQConfig.
func (in *RabbitMQConfig) DeepCopy() *RabbitMQConfig {
	if in == nil {
		return nil
	}
	out := new(RabbitMQConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RabbitMQDataProvider) DeepCopyInto(out *RabbitMQDataProvider) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	if in.Queues != nil {
		in, out := &in.Queues, &out.Queues
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	if in.Exchange != nil {
		in, out := &in.Exchange, &out.Exchange
		*out = new(RabbitMQExchange)
		**out = **in
	}
	if in.RabbitMQConfig != nil {
		in, out := &in.RabbitMQConfig, &out.RabbitMQConfig
		*out = new(RabbitMQConfig)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RabbitMQDataProvider.
func (in *RabbitMQDataProvider) DeepCopy() *RabbitMQDataProvider {
	if in == nil {
		return nil
	}
	out := new(RabbitMQDataProvider)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RabbitMQExchange) DeepCopyInto(out *RabbitMQExchange) {
	*out = *in
	out.TypeMeta = in.TypeMeta
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RabbitMQExchange.
func (in *RabbitMQExchange) DeepCopy() *RabbitMQExchange {
	if in == nil {
		return nil
	}
	out := new(RabbitMQExchange)
	in.DeepCopyInto(out)
	return out
}
