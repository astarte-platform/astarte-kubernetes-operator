apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ k8s_deployment_name }}
  namespace: {{ astarte_k8s_namespace }}
  labels:
    app: {{ resources_computed_prefix }}{{ k8s_service_name }}-api
    astarte-service: {{ k8s_service_name }}
    component: astarte
spec:
  replicas: {{ k8s_deployment_replicas }}
  selector:
    matchLabels:
      app: {{ resources_computed_prefix }}{{ k8s_service_name }}-api
  template:
    metadata:
      labels:
        app: {{ resources_computed_prefix }}{{ k8s_service_name }}-api
        astarte-service: {{ k8s_service_name }}
        component: astarte
    spec:
      containers:
      - name: {{ k8s_service_name }}-api
        image: {{ k8s_deployment_image }}
        imagePullPolicy: {{ astarte_image_pull_policy }}
{% if check_api_health %}
        readinessProbe:
          httpGet:
            path: /v1/health
            port: 4000
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
{% endif %}
        ports:
          - containerPort: 4000
            name: apiout
        volumeMounts:
{% if k8s_deployment_additional_volume_mounts %}
{% for volume_mounts in k8s_deployment_additional_volume_mounts %}
          - name: {{ volume_mounts.name }}
            mountPath: {{ volume_mounts.mountPath }}
            readOnly: {{ volume_mounts.readOnly }}
{% endfor %}
{% endif %}
          - name: config-volume
            mountPath: /beamconfig
            readOnly: true
        resources:
          requests:
            cpu: "{{ k8s_deployment_resources_requests_cpu }}"
            memory: "{{ k8s_deployment_resources_requests_memory }}"
          limits:
            cpu: "{{ k8s_deployment_resources_limits_cpu }}"
            memory: "{{ k8s_deployment_resources_limits_memory }}"
        env:
          # These are needed for tweaking the Erlang VM
          - name: RELEASE_CONFIG_DIR
            value: /beamconfig
          - name: REPLACE_OS_VARS
            value: "true"
          - name: MY_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: RELEASE_NAME
            value: astarte_{{ astarte_app_name }}_api
          - name: ERLANG_COOKIE
            valueFrom:
              secretKeyRef:
                name: {{ k8s_erlang_cookie_name }}
                key: erlang-cookie
          # Actual configuration variables
          - name: ASTARTE_RPC_AMQP_CONNECTION_USERNAME
            valueFrom:
              secretKeyRef:
                name: {{ rabbitmq_connection_k8s_credentials_secret_name }}
                key: {{ rabbitmq_connection_k8s_credentials_secret_username_key }}
          - name: ASTARTE_RPC_AMQP_CONNECTION_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ rabbitmq_connection_k8s_credentials_secret_name }}
                key: {{ rabbitmq_connection_k8s_credentials_secret_password_key }}
          - name: ASTARTE_RPC_AMQP_CONNECTION_HOST
            value: "{{ astarte_app_amqp_connection_host }}"
          - name: {{ astarte_app_name | upper }}_API_PORT
            value: "{{ astarte_app_api_port }}"
{% if k8s_deployment_additional_variables %}
{% for variable in k8s_deployment_additional_variables %}
          - name: {{ variable.name }}
            value: "{{ variable.value }}"
{% endfor %}
{% endif %}
{% if k8s_deployment_additional_secret_variables %}
{% for variable in k8s_deployment_additional_secret_variables %}
          - name: {{ variable.name }}
            valueFrom:
              secretKeyRef:
                name: {{ variable.secret_name }}
                key: {{ variable.secret_key }}
{% endfor %}
{% endif %}
      volumes:
{% if k8s_deployment_additional_secret_volumes %}
{% for secret_volume in k8s_deployment_additional_secret_volumes %}
      - name: {{ secret_volume.name }}
        secret:
          secretName: {{ secret_volume.secretName }}
{% endfor %}
{% endif %}
      - name: config-volume
        configMap:
          name: {{ resources_computed_prefix }}generic-erlang-configuration
          items:
          - key: vm.args
            path: vm.args
